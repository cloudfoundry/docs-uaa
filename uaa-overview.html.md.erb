---
title: UAA Overview
owner: UAA
---

User Account and Authentication (UAA) is an open-source identity server project under the Cloud Foundry (CF) Foundation.

UAA provides enterprise-scale identity management features. For example, it is used by these commercial services:

* [<%= vars.product_name %> Single Sign-On Service](https://pivotal.io/platform/services/identity-and-security/sso): Identity Services for Apps and APIs running on <%= vars.product_runtime %> (<%= vars.product_short %>)

* [GE Predix Identity Services](https://docs.predix.io/en-US/content/service/security/user_account_and_authentication/uaa-service-overview)

* [SAP HANA Identity Services](https://help.sap.com/viewer/4505d0bdaf4948449b7f7379d24d0f0d/2.0.01/en-US/c6f36d5d49844bd790798ea36538e024.html)


## <a id="overview"></a> What Is UAA?

UAA provides identity-based security for apps and APIs. It supports open standards for authentication and authorization, including:

* OAuth
* OpenID Connect
* SAML
* LDAP
* SCIM

The major features of UAA include:

* User Single Sign-On (SSO) using federated identity protocols
* API security with OAuth
* User and group management
* Multi-tenancy support
* Support for **JWT** and **opaque** as a token format
* Token revocation
* Operational flexibility
	* Operate and run as a [BOSH release](http://bosh.io/releases/github.com/cloudfoundry/uaa-release?all=1), which allows multi-cloud deployment capabilities
	* Push as an app to <%= vars.product_short %>
* Database flexibility, including support for MySQL and Postgres
* Auditing, logging, and monitoring
* Token exchange for SAML and JWT bearers
* Rest APIs for authentication, authorization, and configuration management


## <a id='uaa-architecture'></a> UAA Architecture

The diagram below illustrates the architecture of UAA:

<img src="./images/uaa-architecture.png" alt="UAA architecture diagram">

The table below describes the protocols UAA can use:

| Protocol | Purpose | Profiles |
| -------- | ------- | -------- |
| OAuth 2.0 | Authorizes apps and APIs | Authorization Server, Relying Party |
| OpenID Connect 1.0 | Federates to external identity providers (IDPs) and acts as an IDP for SSO | Identity Provider, Relying Party |
| SAML 2.0 | Federates to external IDPs and acts as an IDP for SSO | Identity Provider, Service Provider |
| LDAP | Authenticates users in external user store | LDAP Client |
| SCIM 1.0 | Manages users and groups | Identity Provisioning |


## <a id="client-tools"></a> Client-Side Tools and Libraries

The table below describes the client-side tools and libraries UAA uses:

<table class="nice">
	<th>Name</th>
	<th>Language</th>
	<tr>
		<td><a href="https://github.com/cloudfoundry/cf-uaac">UAAC</a><br/>
		<a href="https://github.com/cloudfoundry/cf-uaa-lib">CF-UAA-LIB</a></td>
		<td>Ruby</td>
	</tr>
	<tr>
		<td><a href="http://projects.spring.io/spring-security-oauth/">Spring Security OAuth</a></td>
		<td>Java</td>
	</tr>
	<tr>
		<td><a href="https://github.com/cloudfoundry/cf-java-client">CF Java Client</a></td>
		<td>Java</td>
	</tr>
	<tr>
		<td><a href="https://github.com/cloudfoundry/uaa-singular">UAA Javascript SDK (Singular)</a></td>
		<td>JS</td>
	</tr>
</table>


## <a id="securing"></a> The Role of UAA in Securing <%= vars.product_short %>

<%= vars.product_short %> relies on UAA for its identity and access management requirements. UAA secures user and system access to <%= vars.product_short %> installations.

Since <%= vars.product_short %> is primarily used in the enterprise context, UAA supports enterprise SSO workflows. If a user has already authenticated against the enterprise IDP, they can access <%= vars.product_short %> without re-entering credentials.

Some of the major components of <%= vars.product_short %> that use UAA include:

* Cloud Controller
* Gorouter
* Loggregator
* Container networking

Each of these components expose APIs for user and system interaction. UAA uses OAuth to secure the APIs exposed by core <%= vars.product_short %> components.

UAA secures many different <%= vars.product_short %> components, including:

* Cloud Foundry Command Line Interface (cf CLI)
* Cloud Controller
* Loggregator
* Notifications
* Gorouter
* Container Networking
* Diego
* BOSH Director
* Autoscaler
