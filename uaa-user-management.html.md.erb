---
title: Creating and managing users with the UAA CLI (UAAC)
owner: Identity
---



Using the Cloud Foundry User Account and Authentication Command Line Interface (UAAC), you can create users in the UAA server.

<p class="note"><strong>Note:</strong> The UAAC only creates users in UAA, and does not assign roles in the Cloud Controller database (CCDB). In general, admins create users using the Cloud Foundry Command Line Interface (cf CLI). The cf CLI both creates user records in the UAA and associates them with org and space roles in the CCDB. Before admins can assign roles to the user, the user must log in through Apps Manager or the cf CLI for the user record to populate the CCDB. For more information, see <a href="../adminguide/cli-user-management.html">Creating and Managing Users with the cf CLI</a>.</p></p>

For more information, see [UAA Overview](../concepts/architecture/uaa.html), [UAA Sysadmin Guide](https://github.com/cloudfoundry/uaa/blob/master/docs/Sysadmin-Guide.rst) in the UAA repository on GitHub, and [Docs](https://github.com/cloudfoundry/uaa/tree/master/docs) in the UAA repository on GitHub.

<p class="note"><strong>Note:</strong> UAAC requires Ruby v2.3.1 or later. If you have an earlier version of Ruby installed, install Ruby v2.3.1 or later before using the UAAC.</p>

For more information about which roles can perform various operations in <%= vars.platform_name %>, see [User roles](../concepts/roles.html#roles) in _Orgs, Spaces, Roles, and Permissions_.


## <a id='creating-admin-users'></a> Create an admin user

To create an admin user for UAA:

1. Install the UAAC by running:

    ```
    gem install cf-uaac
    ```

1. Target your UAA server by running:

    ```
    uaac target uaa.UAA-DOMAIN
    ```
    Where `UAA-DOMAIN` is the domain of your UAA server.

1. Record the `uaa:admin:client_secret` from your deployment manifest.

1. Authenticate and obtain an access token for the admin client from the UAA server by running:

    ```
    uaac token client get admin -s ADMIN-CLIENT-SECRET
    ```
    Where `ADMIN-CLIENT-SECRET` is the admin secret you recorded in the previous step.
    <br>
    <br>
    UAAC stores the token in `~/.uaac.yml`.

1. Display the users and apps authorized by the UAA server, as well as the permissions granted to each user and app, by running:

    ```
    uaac contexts
    ```

1. In the output from `uaac contexts`, check the `scope` section of the `client_id: admin` user for `scim.write`. The value `scim.write` represents sufficient permissions to create accounts.

1. If the admin user lacks permissions to create accounts, add the permissions:
    1. Add the necessary permissions to the admin user account on the UAA server by running:

        ```
        uaac client update admin --authorities "EXISTING-PERMISSIONS scim.write"
        ```
        Where `EXISTING-PERMISSIONS` is the current contents of the `scope` section from the output from `uaac contexts`.
    1. Delete the local token by running:

        ```
        uaac token delete
        ```
    1. Obtain an updated access token from the UAA server by running:

        ```
        uaac token client get admin
        ```

1. Create an admin user by running:

    ```
    uaac user add NEW-ADMIN-USERNAME -p NEW-ADMIN-PASSWORD --emails NEW-ADMIN-EMAIL
    ```

    Where:
    <ul>
      <li><code>NEW-ADMIN-USERNAME</code> is the username you want to give the admin user.</li>
      <li><code>NEW-ADMIN-PASSWORD</code> is the password you want to give the admin user.</li>
      <li><code>NEW-ADMIN-EMAIL</code> is the email address of the admin user.</li>
    </ul>

1. Add the new admin user to the groups `cloud_controller.admin`, `uaa.admin`, `scim.read`, and `scim.write` by running:

    ```
    uaac member add GROUP NEW-ADMIN-USERNAME
    ```

    Where:
    <ul>
      <li><code>GROUP</code> is the name of the group to which you want to add the new admin user.</li>
      <li><code>NEW-ADMIN-USERNAME</code>is the username of the new admin user.</li>
    </ul>


### <a id="admin-read-only"></a> Create an admin read-only user

The admin read-only account can view but not modify almost all Cloud Controller API resources. The admin read-only account cannot view process `stats` or `logs`.

To create an admin read-only user account:

1. Obtain the credentials of the admin client you created in [Create an Admin User](#creating-admin-users), or see the `uaa: scim` section of your deployment manifest for the user name and password of an admin user.

1. Authenticate and obtain an access token for the admin client from the UAA server by running:

    ```
    uaac token client get admin -s ADMIN-CLIENT-SECRET
    ```
    Where `ADMIN-CLIENT-SECRET` is the admin secret you recorded in the previous step.
    <br>
    <br>
    UAAC stores the token in `~/.uaac.yml`.

1. Create an admin read-only user by running:

    ```
    uaac user add NEW-ADMIN-RO-USERNAME -p NEW-ADMIN-RO-PASSWORD --emails NEW-ADMIN-RO-EMAIL
    ```

    Where:
    <ul>
      <li><code>NEW-ADMIN-RO-USERNAME</code> is the username you want to give the admin read-only user.</li>
      <li><code>NEW-ADMIN-RO-PASSWORD</code> is the password you want to give the admin read-only user.</li>
      <li><code>NEW-ADMIN-RO-EMAIL</code> is the email address of the admin read-only user.</li>
    </ul>


1. Add the new admin user to the groups `cloud_controller.admin_read_only` and `scim.read` by running:

    ```
    uaac member add GROUP NEW-ADMIN-RO-USERNAME
    ```

    Where:
    <ul>
      <li><code>GROUP</code> is the name of the group to which you want to add the new admin read-only user.</li>
      <li><code>NEW-ADMIN-RO-USERNAME</code>is the username of the new admin read-only user.</li>
    </ul>


### <a id="global-auditor"></a> Create a global auditor

The global auditor account has read-only access to almost all Cloud Controller API resources but cannot access secret data such as environment variables. The global auditor account cannot view process `stats` or `logs`.

To create a global auditor account:

1. Obtain the credentials of the admin client you created in [Create an admin user](#creating-admin-users), or see the `uaa: scim` section of your deployment manifest for the user name and password of an admin user.

1. Authenticate and obtain an access token for the admin client from the UAA server by running:

    ```
    uaac token client get admin -s ADMIN-CLIENT-SECRET
    ```
    Where `ADMIN-CLIENT-SECRET` is the admin secret you recorded in the previous step.
    <br>
    <br>
    UAAC stores the token in `~/.uaac.yml`.

1. Create a global auditor user by running:

    ```
    uaac user add NEW-GLOBAL-AUDITOR-USERNAME -p NEW-GLOBAL-AUDITOR-PASSWORD --emails NEW-GLOBAL-AUDITOR-EMAIL
    ```

    Where:
    <ul>
      <li><code>NEW-GLOBAL-AUDITOR-USERNAME</code> is the username you want to give the admin read-only user.</li>
      <li><code>NEW-GLOBAL-AUDITOR-PASSWORD</code> is the password you want to give the admin read-only user.</li>
      <li><code>NEW-GLOBAL-AUDITOR-EMAIL</code> is the email address of the admin read-only user.</li>
    </ul>

1. To ensure that the `cloud_controller.global_auditor` group exists, run:

    ```
    uaac group add cloud_controller.global_auditor
    ```

1. Add the new global auditor user to the `cloud_controller.global_auditor` group by running:

    ```
    uaac member add GROUP NEW-GLOBAL-AUDITOR-USERNAME
    ```

    Where:
    <ul>
      <li><code>GROUP</code> is the name of the group to which you want to add the new global auditor user.</li>
      <li><code>NEW-GLOBAL-AUDITOR-USERNAME</code> is the username of the new global auditor user.</li>
    </ul>

## <a id='external-group'></a> Grant admin permissions to an external group (SAML, LDAP, or OIDC)

To grant all users under an external group admin permissions:

1. Obtain the credentials of the admin client you created in [Create an Admin User](#creating-admin-users), or see the `uaa: scim` section of your deployment manifest for the user name and password of an admin user.

1. Authenticate and obtain an access token for the admin client from the UAA server by running:

    ```
    uaac token client get admin -s ADMIN-CLIENT-SECRET
    ```
    Where `ADMIN-CLIENT-SECRET` is the admin secret you recorded in the previous step.
    <br>
    <br>
    UAAC stores the token in `~/.uaac.yml`.

1. Follow the procedure that corresponds to your use case:
    * [Grant Admin Permissions for LDAP](#grant-admin-ldap)
    * [Grant Admin Permissions for SAML and OIDC](#grant-admin-saml)

<p class="note"><strong>Note:</strong> The UAA does not grant scopes for users in external groups until the next time the user logs in. This means that users granted scopes from external group mappings must log out from <%= vars.platform_name %> and log back in before their new scope takes effect.</p>

### <a id='grant-admin-ldap'></a> Grant admin permissions for LDAP

To grant admin permissions to all users under the mapped LDAP group:

1. Run:

    ```
    uaac group map --name scim.read "GROUP-DISTINGUISHED-NAME"
    ```
    Where `GROUP-DISTINGUISHED-NAME` is the name of the LDAP group.

1. Run:

    ```
    uaac group map --name scim.write "GROUP-DISTINGUISHED-NAME"
    ```
    Where `GROUP-DISTINGUISHED-NAME` is the name of the LDAP group.

1. Run:

    ```
    uaac group map --name cloud_controller.admin "GROUP-DISTINGUISHED-NAME"
    ```
    Where `GROUP-DISTINGUISHED-NAME` is the name of the LDAP group.

### <a id='grant-admin-saml'></a> Grant admin permissions for SAML and OIDC

To grant admin permissions to all users under the mapped SAML or OIDC group:

1. <%= vars.saml_provider %>

1. Grant all users under the mapped SAML or OIDC group admin permissions by running:

    ```
    uaac group map --name scim.read "GROUP-NAME" --origin PROVIDER-NAME
    uaac group map --name scim.write "GROUP-NAME" --origin PROVIDER-NAME
    uaac group map --name cloud_controller.admin "GROUP-NAME" --origin PROVIDER-NAME
    ```
    Where:
    <ul>
      <li><code>GROUP-NAME</code> is the name of the SAML or OIDC group.</li>
      <li><code>PROVIDER-NAME</code> is the name of your SAML or OIDC IDP.</li>
    </ul>

<p class='note'><strong>Note:</strong> For OIDC, make sure you configure the IDP's attribute mappings and map <code>external_groups</code> to the groups field in the OIDC ID Token issued by the IDP.</p>

## <a id='creating-users'></a> Create users

To create new users:

1. Obtain the credentials of the admin client you created in [Create an Admin User](#creating-admin-users), or see the `uaa: scim` section of your deployment manifest for the username and password of an admin user.

1. Log in to your UAA API by running:

    ```
    cf login -u ADMIN-USERNAME -p ADMIN-PASSWORD
    ```

    Where:
    <ul>
      <li><code>ADMIN-USERNAME</code> is the username of the admin user.</li>
      <li><code>ADMIN-PASSWORD</code> is the password of the admin user.</li>
    </ul>


1. Create a new user by running:

    ```
    cf create-user NEW-USERNAME NEW-USER-PASSWORD
    ```

    Where:
    <ul>
      <li><code>NEW-USERNAME</code> is the username you give the new user.</li>
      <li><code>NEW-USER-PASSWORD</code> is the password you give the new user.</li>
    </ul>

## <a id='changing-passwords'></a> Change passwords

To change the password of a user:

1. Obtain the credentials of the admin client you created in [Create an Admin User](#creating-admin-users), or see the `uaa: scim` section of your deployment manifest for the user name and password of an admin user.

1. Authenticate and obtain an access token for the admin client from the UAA server by running:

    ```
    uaac token client get admin -s ADMIN-CLIENT-SECRET
    ```
    Where `ADMIN-CLIENT-SECRET` is the admin secret you recorded in the previous step.
    <br>
    <br>
    UAAC stores the token in `~/.uaac.yml`.

1. Display the users and apps authorized by the UAA server, as well as the permissions granted to each user and app, by running:

    ```
    uaac contexts
    ```

1. In the output from `uaac contexts`, check the `scope` section of the `client_id: admin` user for `password.write`. The value `password.write` represents sufficient permissions to change passwords.

1. If the admin user lacks permissions to change passwords, add the permissions:
    1. Add the necessary permissions to the admin user account on the UAA server by running:

        ```
        uaac client update admin --authorities "EXISTING-PERMISSIONS password.write"
        ```
        Where `EXISTING-PERMISSIONS` is the current contents of the `scope` section from the output from `uaac contexts`.
    1. Delete the local token by running:

        ```
        uaac token delete
        ```
    1. Obtain an updated access token from the UAA server by running:

        ```
        uaac token client get admin
        ```

1. Change an existing user password to a temporary password by running:

    ```
    uaac password set USERNAME -p TEMP-PASSWORD
    ```

    Where:
    <ul>
      <li><code>USERNAME</code> is the username of the user whose password you want to change.</li>
      <li><code>TEMP-PASSWORD</code> is the temporary password you set.</li>
    </ul>


1. Provide the temporary password to the user and instruct the user to run:

    ```
    cf target api.UAA-DOMAIN
    cf login -u USERNAME -p TEMP-PASSWORD
    cf passwd
    ```

    Where:
    <ul>
      <li><code>UAA-DOMAIN</code> is the domain of your UAA server.</li>
      <li><code>USERNAME</code> is the username of the user.</li>
      <li><code>TEMP-PASSWORD</code> is the temporary password you provided the user.</li>
    </ul>
    <br><br>
    <%= vars.pw_policy %>


## <a id='retrieving-email-addresses'></a> Retrieve user email addresses

Some <%= vars.platform_name %> components, like Cloud Controller, only use GUIDs for user identification. You can use UAA to retrieve the emails of your <%= vars.platform_name %> instance users either as a list or, for a specific user, with that user's GUID.

1. Target your UAA server by running:

    ```
    uaac target uaa.UAA-DOMAIN
    ```
    Where `UAA-DOMAIN` is the domain of your UAA server.

1. Record the `uaa:admin:client_secret` from your deployment manifest.

1. Authenticate and obtain an access token for the admin client from the UAA server by running:

    ```
    uaac token client get admin -s ADMIN-CLIENT-SECRET
    ```
    Where `ADMIN-CLIENT-SECRET` is the admin secret you recorded in the previous step.
    <br>
    <br>
    UAAC stores the token in `~/.uaac.yml`.

1. Display the users and apps authorized by the UAA server, as well as the permissions granted to each user and app, by running:

    ```
    uaac contexts
    ```

1. In the output from `uaac contexts`, check the `scope` section of the `client_id: admin` user for `scim.write`. The value `scim.write` represents sufficient permissions to query the UAA server for user information.

1. If the admin user lacks permissions to change passwords, add the permissions:
    1. Add the necessary permissions to the admin user account on the UAA server by running:

        ```
        uaac client update admin --authorities "EXISTING-PERMISSIONS scim.write"
        ```
        Where `EXISTING-PERMISSIONS` is the current contents of the `scope` section from the output from `uaac contexts`.
    1. Delete the local token by running:

        ```
        uaac token delete
        ```
    1. Obtain an updated access token from the UAA server by running:

        ```
        uaac token client get admin
        ```

1. To list your <%= vars.platform_name %> instance users, run:

    ```
    uaac users
    ```
    By default, the `uaac users` command returns information about each user account, including GUID, name, permission groups, activity status, and metadata. To limit the output of `uaac users` to email addresses, run:

    ```
    uaac users --attributes emails
    ```

1. To retrieve a specific user's email address, run:

    ```
    uaac users "id eq GUID" --attributes emails
    ```
    Where `GUID` is the GUID of a specific user.
